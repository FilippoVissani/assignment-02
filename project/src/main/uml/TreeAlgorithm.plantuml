@startuml

interface Node<A> << interface >> {
  + addChildren(List<Node<A>>): Node<A>
  + addChild(Node<A>): Node<A>
  + nodeToString(StringBuilder, String): void
  + foreach(Function1<A, BoxedUnit>): void
  + children(): List<Node<A>>
  + map(Function1<A, B>): Node<B>
  + apply(A, List<Node<A>>): Node<A>
  + element(): A
}
class NodeImpl<A>
interface TreeGenerator<A> << interface >> {
  + generateTree(Function2<A, A, Object>): List<Node<A>>
  + apply(Ordering<A>): TreeGenerator<A>
  + addNode(Node<A>): void
}
class TreeGeneratorImpl<A>

NodeImpl           -[#008200,dashed]-^  Node              
NodeImpl           +-[#820000,plain]-  Node
TreeGeneratorImpl  +-[#820000,plain]-  TreeGenerator     
TreeGeneratorImpl  -[#008200,dashed]-^  TreeGenerator     
TreeGeneratorImpl *-[#595959,plain]-> Node
@enduml
